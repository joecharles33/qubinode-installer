#!/usr/bin/env bash
# This script will start the automated depoyment of openshift home lab

# Uncomment for debugging
#export PS4='+(${BASH_SOURCE}:${LINENO}): ${FUNCNAME[0]:+${FUNCNAME[0]}(): }'
#set -x

# Turn verbose off
_V=1

# Load all functions
PROJECT_DIR=$( cd "$( dirname "${BASH_SOURCE[0]}" )" && pwd )
FUNCTIONS="qubinode_satellite.sh qubinode_utils.sh qubinode_userinput.sh qubinode_ansible.sh qubinode_kvmhost.sh qubinode_idm.sh qubinode_ocp3.sh qubinode_rhsm.sh"
for item in $(echo "${FUNCTIONS}")
do
    if [ -f "${PROJECT_DIR}/lib/${item}" ]
    then
        source "${PROJECT_DIR}/lib/${item}"
    else
        echo "Could not find function ${item}"
        echo "${PROJECT_DIR}/lib/${item}"
        exit 1
    fi
done

HARDWARE_ROLE=$(sudo hostnamectl | awk '/Chassis/ {print $2}')
OS=$(awk '{print $1}' /etc/redhat-release)

# Ensure the product is valid and setup the product for the rest of the run
# validate the product the user wants to install
function validate_product_by_user () {
    prereqs
    available_products="ocp3 okd3 idm kvmhost satellite"
    if [ "A${qubinode_product_opt}" != "A" ]
    then
        product_in_use=$(contains_string "$available_products" "${qubinode_product_opt}")
        if [ "A${maintenance}" != "Arhsm" ] && [ "A${maintenance}" != "Asetup" ] && [ "A${maintenance}" != "Aclean" ] && [ "A${maintenance}" != "Aansible" ]
        then
            if [ "A${product_in_use}" == "Ainvalid" ]
            then
                echo "The ${qubinode_product_opt} is not a supported product"
                echo "Supported products are: $available_products"
                exit
            fi
        fi
     else
        echo "The product ${qubinode_product_opt} does not exist"
        exit 1
    fi
}

function qubinode_installer_preflight () {
    setup_sudoers
    prereqs
    setup_user_ssh_key
    setup_variables
    ask_user_input

    # Setup admin user variable
    if grep '""' "${vars_file}"|grep -q admin_user
    then
        echo "Updating ${vars_file} admin_user variable"
        sed -i "s#admin_user: \"\"#admin_user: "$CURRENT_USER"#g" "${vars_file}"
    fi

    # Pull variables from all.yml needed for the install
    domain=$(awk '/^domain:/ {print $2}' "${project_dir}/playbooks/vars/all.yml")
}

#function qubinode_vm_manager () {
#   # Deploy VMS
#   prereqs
#   deploy_vm_opt="$1"
#
#   if [ "A${teardown}" != "Atrue" ]
#   then
#       # Ensure the setup function as was executed
#       if [ ! -f "${vars_file}" ]
#       then
#           qubinode_installer_preflight
#           #echo "${vars_file} is missing"
#           #echo "Please run qubinode-installer -m setup"
#           #echo ""
#           #exit 1
#       fi
#
#       # Ensure the ansible function has bee executed
#      # Check for ansible and ansible role
#       if [ -f /usr/bin/ansible ]
#       then
#           ROLE_PRESENT=$(ansible-galaxy list | grep 'swygue.edge_host_setup')
#           if [ "A${ROLE_PRESENT}" == "A" ]
#           then
#               qubinode_setup_ansible
#           fi
#       else
#           qubinode_setup_ansible
#       fi
#
#
#       # Check for required Qcow image
#       check_for_rhel_qcow_image
#    fi
#
#   DNS_PLAY="${project_dir}/playbooks/deploy-dns-server.yml"
#   NODES_PLAY="${project_dir}/playbooks/deploy_nodes.yml"
#   NODES_POST_PLAY="${project_dir}/playbooks/nodes_post_deployment.yml"
#   CHECK_OCP_INVENTORY="${project_dir}/inventory/inventory.3.11.rhel.gluster"
#   NODES_DNS_RECORDS="${project_dir}/playbooks/nodes_dns_records.yml"
#
#   if [ "A${deploy_vm_opt}" == "Adeploy_dns" ]
#   then
#       if [ "A${teardown}" == "Atrue" ]
#       then
#           echo "Remove DNS VM"
#           ansible-playbook "${DNS_PLAY}" --extra-vars "vm_teardown=true" || exit $?
#       else
#           echo "Deploy DNS VM"
#           ansible-playbook "${DNS_PLAY}" || exit $?
#       fi
#   elif [ "A${deploy_vm_opt}" == "Adeploy_nodes" ]
#   then
#       if [ "A${teardown}" == "Atrue" ]
#       then
#           echo "Remove ${qubinode_product} VMs"
#           ansible-playbook "${NODES_DNS_RECORDS}" --extra-vars "vm_teardown=true" || exit $?
#           ansible-playbook "${NODES_PLAY}" --extra-vars "vm_teardown=true" || exit $?
#           if [[ -f ${CHECK_OCP_INVENTORY}  ]]; then
#              rm -rf ${CHECK_OCP_INVENTORY}
#           fi
#       else
#           echo "Deploy ${qubinode_product} VMs"
#           ansible-playbook "${NODES_PLAY}" || exit $?
#           ansible-playbook "${NODES_POST_PLAY}" || exit $?
#       fi
#   elif [ "A${deploy_vm_opt}" == "Askip" ]
#   then
#       echo "Skipping running ${project_dir}/playbooks/deploy_vms.yml" || exit $?
#   else
#        display_help
#   fi
#}

function qubinode_vm_deployment_precheck () {
   # This function ensure that the host is setup as a KVM host.
   # It ensures the foundation is set to allow ansible playbooks can run
   # and the products can be deployed.
   prereqs
   setup_variables
   ask_user_input
   echo "Running VM deployment prechecks"
   if [ "A${teardown}" != "Atrue" ]
   then
       # Ensure the setup function as was executed
       if [ ! -f "${vars_file}" ]
       then
           qubinode_installer_preflight
       fi

       # Check if KVM HOST is ready
       echo "Verifying KVM host is setup"
       qubinode_check_kvmhost

       # Ensure the ansible function has bee executed
       if [ ! -f /usr/bin/ansible ]
       then
           qubinode_setup_ansible
       else
           STATUS=$(ansible-galaxy list | grep ansible-role-rhel7-kvm-cloud-init >/dev/null 2>&1; echo $?)
           echo "STATUS=A${STATUS}"
           if [ "A${STATUS}" != "A0" ]
           then
               qubinode_setup_ansible
           fi
       fi

       # Check for required Qcow image
       check_for_rhel_qcow_image
    fi
}

function qubinode_maintenance_options () {
    if [ "${qubinode_maintenance_opt}" == "clean" ]
    then
        qubinode_project_cleanup
    elif [ "${qubinode_maintenance_opt}" == "setup" ]
    then
        qubinode_installer_preflight
    elif [ "${qubinode_maintenance_opt}" == "rhsm" ]
    then
        qubinode_rhsm_register
    elif [ "${qubinode_maintenance_opt}" == "ansible" ]
    then
        qubinode_setup_ansible
    elif [ "${qubinode_maintenance_opt}" == "host" ] || [ "${maintenance}" == "kvmhost" ]
    then
        qubinode_setup_kvm_host
    elif [ "${qubinode_maintenance_opt}" == "deploy_nodes" ]
    then
        qubinode_vm_manager deploy_nodes
    elif [ "${qubinode_maintenance_opt}" == "undeploy" ]
    then
        #TODO: this should remove all VMs and clean up the project folder
        qubinode_vm_manager undeploy
    elif [ "${qubinode_maintenance_opt}" == "uninstall_openshift" ]
    then
      #TODO: this should remove all VMs and clean up the project folder
        qubinode_uninstall_openshift
    else
        display_help
    fi
}

function qubinode_product_deployment () {
    if [ "${product_in_use}" == "ocp3" ]
    then
        echo "Run OpenShift Install"
        are_nodes_deployed
        qubinode_run_openshift_installer
    elif [ "${product_in_use}" == "idm" ]
    then
        echo "*************"
        echo "Deploying IdM"
        qubinode_deploy_idm
        echo "*************"
    elif [ "${product_in_use}" == "kvmhost" ]
    then
        echo "Run KVM host setup"
        qubinode_setup_kvm_host
    elif [ "${product_in_use}" == "satellite" ]
    then
        echo "Deploy a Red Hat Satellite server"
        qubinode_deploy_satellite
    else
        display_help
    fi
}

function qubinode_openshift_clustermanager () {
    setup_required_paths
    CHECK_STATE_CMD="${project_dir}/playbooks/roles/ocp-power-management/files/check_system_state.sh"
    case ${cluster_opt} in
        diag)
            echo "Perparing to run full Diagnostics"
            MASTER_NODE=$(cat "${project_dir}/inventory/hosts" | grep "master01" | awk '{print $1}')
            ssh -t  -o "StrictHostKeyChecking=no" $MASTER_NODE "sudo oadm diagnostics"
            ;;
        smoketest)
            echo  "Running smoke test on environment."
            bash "${project_dir}/lib/openshift-smoke-test.sh" || exit $?
            ;;
        shutdown)
            echo  "Shutting down cluster."
            bash "${project_dir}/lib/qubinode_shutdown_cluster.sh" || exit $?
            ;;
        startup)
            echo  "Starting up Cluster"
            bash "${project_dir}/lib/qubinode_startup_cluster.sh" || exit $?
            ;;
        checkcluster)
            echo  "Running Cluster health check"
            MASTER_NODE=$(cat "${project_dir}/inventory/hosts" | grep "master01" | awk '{print $1}')
            ssh -t  -o "StrictHostKeyChecking=no"   $MASTER_NODE 'bash -s' < "${CHECK_STATE_CMD}" both
            ;;
        *)
            echo "No arguement was passed"
            ;;
    esac
}



##       MAIN               ##
##############################

# Exit if this is executed as the root user
if is_root; then
    echo "Error: qubi-installer should be run as a normal user, not as root!"
    exit 1
fi

echo ""
echo ""
OPTIND=1
NUM_ARGS="$#"
ALL_ARGS="$@"

while getopts ":c:dvhm:p:a:" opt;
do
    case $opt in
        a) check_args;
           full_deploy=true
           ;;
        c) check_args
           check=true
           cluster=true
           cluster_opt=$OPTARG
           ;;
        d) check_args;
           teardown=true
           ;;
        h) display_help
           exit 1
           ;;
        m) check_args;
           qubinode_maintenance=true
           qubinode_maintenance_opt=$OPTARG;
           ;;
        p) check_args
           check=true
           qubinode_product=true
           qubinode_product_opt=$OPTARG
           ;;
        v) check_args;
           _V=1
           ;;
       --) shift; break;;
       -*) echo Unrecognized flag : "$1" >&2
           display_help
           exit 1
           ;;
       \?) echo Unrecognized flag : "$1" >&2
           display_help
           exit 1
           ;;
    esac
done
shift "$((OPTIND-1))"

# TODO: add verbose option for default install
if (( $OPTIND == 1 )); then
    cat < docs/default_message
    default_message=("Continue with the default installation" "Display the help menu")
    createmenu "${default_message[@]}"
    result=($(echo "${selected_option}"))
    if [ "A${result}" == "ADisplay" ]
    then
        display_help
    elif [ "A${result}" == "AContinue" ]
    then
        qubinode_install_openshift
    else
        echo $result
        echo "Unknown issue, please run the installer again"
    fi
fi

NOARG=true
if [ "A${qubinode_product}" == "Atrue" ]
then
    validate_product_by_user
    product_maintenance="${qubinode_maintenance_opt}"
    if [ "A${product_in_use}" != "A" ]
    then
        qubinode_product_deployment
    fi
    NOARG=false
fi

if [ "A${qubinode_maintenance}" == "Atrue" ]
then
    echo "maintenance option"
    qubinode_maintenance_options
    NOARG=false
fi

if [ "A${cluster_opt}" != "A" ]
then
    qubinode_openshift_clustermanager
    NOARG=false
fi

if [ "A${NOARG}" == "Atrue" ]
then
    display_help
fi

exit 0
